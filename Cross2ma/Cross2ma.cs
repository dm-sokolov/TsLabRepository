//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSLab.User
{
    using System;
    using TSLab.Script;
    using TSLab.Utils;


    public sealed class Script : System.IDisposable
    {

        private TSLab.Script.Handlers.Close Close_h = new TSLab.Script.Handlers.Close();

        private TSLab.Script.Handlers.Open Open_h = new TSLab.Script.Handlers.Open();

        private TSLab.Script.Handlers.HasPositionActive isActivePositions_h = new TSLab.Script.Handlers.HasPositionActive();

        public Script()
        {
        }

        public void Execute(TSLab.Script.Handlers.IContext context, TSLab.Script.ISecurity Symbol)
        {
            // =================================================
            // Graph & Canvas Panes
            // =================================================
            // Make 'MainChart' pane
            TSLab.Script.IGraphPane MainChart_pane = context.CreateGraphPane("MainChart", null);
            MainChart_pane.Visible = true;
            MainChart_pane.HideLegend = false;
            // Initialize 'Close' item
            this.Close_h.Context = context;
            // Make 'Close' item data
            System.Collections.Generic.IList<double> Close = context.GetData("Close", new string[] {
                "Symbol"
            }, delegate {
                return this.Close_h.Execute(Symbol);

            });
            // Initialize 'Open' item
            this.Open_h.Context = context;
            // Make 'Open' item data
            System.Collections.Generic.IList<double> Open = context.GetData("Open", new string[] {
                "Symbol"
            }, delegate {
                return this.Open_h.Execute(Symbol);

            });
            // Initialize 'isActivePositions' item
            bool isActivePositions = false;
            bool isNotActivePositions = false;
            // Make 'isOpenMoreClose' item data
            System.Collections.Generic.IList<bool> isOpenMoreClose;
            try
            {
                int count = System.Math.Min(Open.Count, Close.Count);
                bool[] list = new bool[count];
                if ((context.IsLastBarUsed == false))
                {
                    count--;
                }
                for (int i = 0; (i < count); i++)
                {
                    list[i] = Open[i] > Close[i];
                }
                if ((count > 0
                            && (context.IsLastBarUsed == false)))
                {
                    list[count] = list[count - 1];
                }
                isOpenMoreClose = list;
            }
            catch (System.ArgumentOutOfRangeException)
            {
                throw new TSLab.Script.ScriptException("Ошибка при вычислении блока \'isOpenMoreClose\'. Индекс за пределами диапазона.");
            }
            // Make 'isOpenLessClose' item data
            System.Collections.Generic.IList<bool> isOpenLessClose;
            try
            {
                int count = System.Math.Min(Close.Count, Open.Count);
                bool[] list = new bool[count];
                if ((context.IsLastBarUsed == false))
                {
                    count--;
                }
                for (int i = 0; (i < count); i++)
                {
                    list[i] = Open[i] < Close[i];
                }
                if ((count > 0
                            && (context.IsLastBarUsed == false)))
                {
                    list[count] = list[count - 1];
                }
                isOpenLessClose = list;
            }
            catch (System.ArgumentOutOfRangeException)
            {
                throw new TSLab.Script.ScriptException("Ошибка при вычислении блока \'isOpenLessClose\'. Индекс за пределами диапазона.");
            }
            // =================================================
            // Handlers
            // =================================================
            // =================================================
            // Trading
            // =================================================
            int barsCount = Symbol.Bars.Count;
            if ((context.IsLastBarUsed == false))
            {
                barsCount--;
            }
            for (int i = 0; (i < barsCount); i++)
            {
            }
            if (context.IsOptimization)
            {
                return;
            }
            // =================================================
            // Charts
            // =================================================
            // Make 'Symbol' chart
            TSLab.Script.IGraphList MainChart_pane_Symbol_chart = MainChart_pane.AddList("MainChart_pane_Symbol_chart", ("Symbol"
                            + (" ["
                            + (Symbol.Symbol + "]"))), Symbol, TSLab.Script.CandleStyles.BAR_CANDLE, TSLab.Script.CandleFillStyle.Decreasing, true, -15197697, TSLab.Script.PaneSides.RIGHT);
            Symbol.ConnectSecurityList(MainChart_pane_Symbol_chart);
            MainChart_pane_Symbol_chart.AlternativeColor = -53451;
            MainChart_pane_Symbol_chart.Autoscaling = true;
            MainChart_pane.UpdatePrecision(TSLab.Script.PaneSides.RIGHT, Symbol.Decimals);
        }

        public void Dispose()
        {
        }
    }
}
