//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using TSLab.Script;
using TSLab.Script.Handlers;
using TSLab.Script.Optimization;

namespace TSLab.User
{
    public sealed class Script : System.IDisposable
    {

        private Open Open_h = new Open();

        private Close Close_h = new Close();

        private High High_h = new High();

        private Low Low_h = new Low();

        private SessionLow МинимумСессии_h = new SessionLow();

        private SessionHigh МаксимуСессии_h = new SessionHigh();

        private Max Наибольшее_h = new Max();

        private Min Наименьшее_h = new Min();

        private Add Сложить_h = new Add();

        public IntOptimProperty МинимумСессии_Session = new IntOptimProperty(1, false, 0, 10, 1);

        public IntOptimProperty МаксимуСессии_Session = new IntOptimProperty(1, false, 0, 10, 1);

        public Script()
        {
        }

        public void Execute(IContext context, ISecurity Symbol)
        {
            // =================================================
            // Graph & Canvas Panes
            // =================================================
            // Make 'PricePane' pane
            IGraphPane PricePane_pane = context.CreateGraphPane("PricePane", null);
            PricePane_pane.Visible = true;
            PricePane_pane.HideLegend = false;
            // Initialize 'Open' item
            this.Open_h.Context = context;
            // Make 'Open' item data
            IList<double> Open = context.GetData("Open", new string[] {
                "Symbol"
            }, delegate {
                return this.Open_h.Execute(Symbol);

            });
            // Initialize 'Close' item
            this.Close_h.Context = context;
            // Make 'Close' item data
            IList<double> Close = context.GetData("Close", new string[] {
                "Symbol"
            }, delegate {
                return this.Close_h.Execute(Symbol);

            });
            // Initialize 'High' item
            this.High_h.Context = context;
            // Make 'High' item data
            IList<double> High = context.GetData("High", new string[] {
                "Symbol"
            }, delegate {
                return this.High_h.Execute(Symbol);

            });
            // Initialize 'Low' item
            this.Low_h.Context = context;
            // Make 'Low' item data
            IList<double> Low = context.GetData("Low", new string[] {
                "Symbol"
            }, delegate {
                return this.Low_h.Execute(Symbol);

            });
            // Initialize 'МинимумСессии' item
            this.МинимумСессии_h.Context = context;
            this.МинимумСессии_h.Session = ((int)(this.МинимумСессии_Session.Value));
            // Make 'МинимумСессии' item data
            IList<double> МинимумСессии = context.GetData("МинимумСессии", new string[] {
                this.МинимумСессии_h.Session.ToString(),
                "Symbol"
            }, delegate {
                return this.МинимумСессии_h.Execute(Symbol);

            });
            // Initialize 'МаксимуСессии' item
            this.МаксимуСессии_h.Context = context;
            this.МаксимуСессии_h.Session = ((int)(this.МаксимуСессии_Session.Value));
            // Make 'МаксимуСессии' item data
            IList<double> МаксимуСессии = context.GetData("МаксимуСессии", new string[] {
                this.МаксимуСессии_h.Session.ToString(),
                "Symbol"
            }, delegate {
                return this.МаксимуСессии_h.Execute(Symbol);

            });
            // Initialize 'Наибольшее' item
            this.Наибольшее_h.Context = context;
            // Make 'Наибольшее' item data
            IList<double> Наибольшее = context.GetData("Наибольшее", new string[] {
                "Symbol"
            }, delegate {
                return this.Наибольшее_h.Execute(Open, Close);

            });
            // Initialize 'Наименьшее' item
            this.Наименьшее_h.Context = context;
            // Make 'Наименьшее' item data
            IList<double> Наименьшее = context.GetData("Наименьшее", new string[] {
                "Symbol"
            }, delegate {
                return this.Наименьшее_h.Execute(Open, Close);

            });
            // Initialize 'Сложить' item
            this.Сложить_h.Context = context;
            // Make 'Сложить' item data
            IList<double> Сложить = context.GetData("Сложить", new string[] {
                "Symbol"
            }, delegate {
                return this.Сложить_h.Execute(Open, Close);

            });
            // =================================================
            // Handlers
            // =================================================
            // =================================================
            // Trading
            // =================================================
            int barsCount = Symbol.Bars.Count;
            if ((context.IsLastBarUsed == false))
            {
                barsCount--;
            }
            for (int i = 0; (i < barsCount); i++)
            {
            }
            if (context.IsOptimization)
            {
                return;
            }
            // =================================================
            // Charts
            // =================================================
            // Make 'Symbol' chart
            IGraphList PricePane_pane_Symbol_chart = PricePane_pane.AddList("PricePane_pane_Symbol_chart", ("Symbol"
                            + (" ["
                            + (Symbol.Symbol + "]"))), Symbol, CandleStyles.BAR_CANDLE, CandleFillStyle.Decreasing, true, -569787, PaneSides.RIGHT);
            Symbol.ConnectSecurityList(PricePane_pane_Symbol_chart);
            PricePane_pane_Symbol_chart.AlternativeColor = -13869386;
            PricePane_pane_Symbol_chart.Autoscaling = true;
            PricePane_pane.UpdatePrecision(PaneSides.RIGHT, Symbol.Decimals);
        }

        public void Dispose()
        {
        }
    }
}
