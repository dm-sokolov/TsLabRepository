//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSLab.User
{
    using System.Collections.Generic;
    using TSLab.Script;
    using TSLab.Script.Handlers;


    public sealed class Script : System.IDisposable
    {

        private Open Open_h = new Open();

        private Close Close_h = new Close();

        private High High_h = new High();

        public Script()
        {
        }

        public void Execute(IContext context, ISecurity Symbol)
        {
            // =================================================
            // Graph & Canvas Panes
            // =================================================
            // Make 'PricePane' pane
            IGraphPane PricePane_pane = context.CreateGraphPane("PricePane", null);
            PricePane_pane.Visible = true;
            PricePane_pane.HideLegend = false;
            // Initialize 'Open' item
            this.Open_h.Context = context;
            // Make 'Open' item data
            IList<double> Open = context.GetData("Open", new string[] {
                "Symbol"
            }, delegate {
                return this.Open_h.Execute(Symbol);

            });
            // Initialize 'Close' item
            this.Close_h.Context = context;
            // Make 'Close' item data
            IList<double> Close = context.GetData("Close", new string[] {
                "Symbol"
            }, delegate {
                return this.Close_h.Execute(Symbol);

            });
            // Initialize 'High' item
            this.High_h.Context = context;
            // Make 'High' item data
            IList<double> High = context.GetData("High", new string[] {
                "Symbol"
            }, delegate {
                return this.High_h.Execute(Symbol);

            });
            // =================================================
            // Handlers
            // =================================================
            // =================================================
            // Trading
            // =================================================
            int barsCount = Symbol.Bars.Count;
            if ((context.IsLastBarUsed == false))
            {
                barsCount--;
            }
            for (int i = 0; (i < barsCount); i++)
            {
            }
            if (context.IsOptimization)
            {
                return;
            }
            // =================================================
            // Charts
            // =================================================
            // Make 'Symbol' chart
            IGraphList PricePane_pane_Symbol_chart = PricePane_pane.AddList("PricePane_pane_Symbol_chart", ("Symbol"
                            + (" ["
                            + (Symbol.Symbol + "]"))), Symbol, CandleStyles.BAR_CANDLE, CandleFillStyle.Decreasing, true, -569787, PaneSides.RIGHT);
            Symbol.ConnectSecurityList(PricePane_pane_Symbol_chart);
            PricePane_pane_Symbol_chart.AlternativeColor = -13869386;
            PricePane_pane_Symbol_chart.Autoscaling = true;
            PricePane_pane.UpdatePrecision(PaneSides.RIGHT, Symbol.Decimals);
        }

        public void Dispose()
        {
        }
    }
}
